<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ShanYJ</title>
    <description>╭(╯^╰)╮吉吉的博客</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 14 Jan 2016 10:40:16 +0800</pubDate>
    <lastBuildDate>Thu, 14 Jan 2016 10:40:16 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Django django-bootstrap-toolkit</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;模板组成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#model&quot; id=&quot;markdown-toc-model&quot;&gt;处理model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;分页&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;之前使用bootstrap的aceadmin框架对前端页面进行了美化，于是搜了下bootstrap在django里的一些应用，在这里mark一下&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;安装&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装&amp;amp;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
pip install django-bootstrap-toolkit

#在app中添加
&#39;bootstrap_toolkit&#39;,
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;模板组成&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;head&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
 &amp;lt; head &amp;gt;
    { % bootstrap_stylesheet_tag % }
    { % bootstrap_stylesheet_tag &quot;responsive&quot; % }
    &amp;lt; style type=&quot;text/css&quot;&amp;gt;
        body {
            padding-top: 60px;
        }
    &amp;lt; /style&amp;gt;
    &amp;lt; script src=&quot;//html5shim.googlecode.com/svn/trunk/html5.js&quot;&amp;gt;
    &amp;lt; script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&quot;&amp;gt;
    { % bootstrap_javascript_tag % }
&amp;lt; /head &amp;gt;
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;导航栏&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt; div class=&quot;navbar navbar-fixed-top&quot;&amp;gt;
    &amp;lt; div class=&quot;navbar-inner&quot;&amp;gt;
        &amp;lt; div class=&quot;container&quot;&amp;gt;
            &amp;lt; a class=&quot;brand&quot; href=&quot;/&quot;&amp;gt;django-bootstrap-toolkit&amp;lt; /a&amp;gt;
            &amp;lt; ul class=&quot;nav&quot;&amp;gt;
                &amp;lt; li&amp;gt;&lt;a&gt;Home&lt;/a&gt;&amp;lt; /li&amp;gt;
                &amp;lt; li class=&quot;dropdown&quot;&amp;gt;
                    &amp;lt; a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&amp;gt;Forms&amp;lt; b class=&quot;caret&quot;&amp;gt;&amp;lt; /b&amp;gt;&amp;lt; /a&amp;gt;
                    &amp;lt; ul class=&quot;dropdown-menu&quot;&amp;gt;
                        &amp;lt; li&amp;gt;&amp;lt; a&amp;gt;Vertical&amp;lt; /a&amp;gt;&amp;lt; /li&amp;gt;
                        &amp;lt; li&amp;gt;&amp;lt; a&amp;gt;Horizontal&amp;lt; /a&amp;gt;&amp;lt; /li&amp;gt;
                        &amp;lt; li&amp;gt;&amp;lt; a&amp;gt;Inline&amp;lt; /a&amp;gt;&amp;lt; /li&amp;gt;
                        &amp;lt; li&amp;gt;&amp;lt; a&amp;gt;Search&amp;lt; /a&amp;gt;&amp;lt; /li&amp;gt;
                        &amp;lt; li&amp;gt;&amp;lt; a&amp;gt;Using template&amp;lt; /a&amp;gt;&amp;lt; /li&amp;gt;
                    &amp;lt; /ul&amp;gt;
                &amp;lt; /li&amp;gt;
                &amp;lt; li&amp;gt;&amp;lt; a&amp;gt;Formset&amp;lt; /a&amp;gt;&amp;lt; /li&amp;gt;
            &amp;lt; /ul&amp;gt;
        &amp;lt; /div&amp;gt;
    &amp;lt; /div&amp;gt;
&amp;lt; /div&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;页脚&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt; div class=&quot;container&quot;&amp;gt;
    { % bootstrap_messages % }
    &amp;lt; footer class=&quot;row&quot;&amp;gt;
        &amp;lt; div class=&quot;span6&quot;&amp;gt;
            &amp;lt; p&amp;gt;This is &amp;lt; a href=&quot;https://github.com/dyve/django-bootstrap-toolkit&quot;&amp;gt;django-bootstrap-toolkit&amp;lt; /a&amp;gt;&amp;lt; /p&amp;gt;
        &amp;lt; /div&amp;gt;
        &amp;lt; div class=&quot;span6&quot; style=&quot;text-align:right&quot;&amp;gt;
            &amp;lt; p&amp;gt;
                &amp;copy; &amp;lt; a href=&quot;http://twitter.com/dyve&quot;&amp;gt;Dylan Verheul&amp;lt; /a&amp;gt; 2012
                |
                &amp;lt; a href=&quot;https://raw.github.com/dyve/django-bootstrap-toolkit/master/LICENSE&quot;&amp;gt;license&amp;lt; /a&amp;gt;
            &amp;lt; /p&amp;gt;
        &amp;lt; /div&amp;gt;
    &amp;lt; /footer&amp;gt;
&amp;lt; /div&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;model&quot;&gt;处理model&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;普通方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
def hello(request):
    form=TestForm（）
    layout = request.GET.get(&#39;layout&#39;, &#39;&#39;)
    if layout != &#39;search&#39;:
        layout = &#39;inline&#39;
    return render_to_response(&#39;hello.html&#39;,RequestContext(request, {
        &#39;form&#39;: form,
        &#39;layout&#39;: &#39;inline&#39;,
    }))


    &amp;lt; form class=&quot;form-{ { layout } }&quot; action=&quot;&quot; method=&quot;post&quot;&amp;gt;
        { % csrf_token % }
        { { form|as_bootstrap:layout } }
    &amp;lt; input type=&quot;submit&quot; value=&quot;Submit&quot; class=&quot;btn btn-primary&quot;&amp;gt;
    &amp;lt; /form&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;使用formset&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
from django.forms.formsets import formset_factory
def hello(request):
    form=formset_factory(TestForm)
    layout = request.GET.get(&#39;layout&#39;, &#39;&#39;)
    if layout != &#39;search&#39;:
        layout = &#39;inline&#39;
    return render_to_response(&#39;hello.html&#39;,RequestContext(request, {
        &#39;form&#39;: form,
        &#39;layout&#39;: &#39;inline&#39;,
    }))

   &amp;lt; form class=&quot;form-{ { layout } }&quot; action=&quot;&quot; method=&quot;post&quot;&amp;gt;
        { % csrf_token % }
        { % bootstrap_formset formset=form layout=layout % }
        &amp;lt; input type=&quot;submit&quot; value=&quot;Submit&quot; class=&quot;btn btn-primary&quot;&amp;gt;
    &amp;lt; /form&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;分页&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
def demo_pagination(request):
    lines = []
    for i in range(10000):
        lines.append(u&#39;Line %s&#39; % (i + 1))
    paginator = Paginator(lines, 10)
    page = request.GET.get(&#39;page&#39;)
    try:
        show_lines = paginator.page(page)
    except PageNotAnInteger:
        show_lines = paginator.page(1)
    except EmptyPage:
        show_lines = paginator.page(paginator.num_pages)
    return render_to_response(&#39;pagination.html&#39;, RequestContext(request, {
        &#39;lines&#39;: show_lines,
    }))
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;模板&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
 &amp;lt; table class=&quot;table&quot;&amp;gt;
        { % for line in lines % }
            &amp;lt; tr&amp;gt;
                &amp;lt; td&amp;gt;{ { line } }&amp;lt; /td&amp;gt;
            &amp;lt; /tr&amp;gt;
        { % endfor % }
&amp;lt; /table&amp;gt;
{ { lines|pagination } }
{ % bootstrap_pagination lines url=&quot;/pagination?page=1&amp;amp;flop=flip&quot; extra=&quot;q=foo&quot; size=&quot;mini&quot; align=&quot;right&quot; % }
{ % bootstrap_pagination lines url=&quot;/pagination?page=1&quot; align=&quot;center&quot; size=&quot;large&quot; % }
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 15 Dec 2015 04:41:25 +0800</pubDate>
        <link>/2015/12/15/Django-boot/</link>
        <guid isPermaLink="true">/2015/12/15/Django-boot/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Django django-oauth-toolkit</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#token&quot; id=&quot;markdown-toc-token&quot;&gt;授权&amp;amp;token&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#api&quot; id=&quot;markdown-toc-api&quot;&gt;制作api&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#django-user&quot; id=&quot;markdown-toc-django-user&quot;&gt;替代django user&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rest&quot; id=&quot;markdown-toc-rest&quot;&gt;rest联用&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对secfile和其他系统如网络账号进行对接,使用了oauth2.0协议,再次记录一下&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;安装&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;

#终端
pip install django-oauth-toolkit django-cors-headers

#settings.py
INSTALLED_APPS = (
    &#39;oauth2_provider&#39;,
    &#39;corsheaders&#39;,
)

MIDDLEWARE_CLASSES = (
    &#39;corsheaders.middleware.CorsMiddleware&#39;,
)

CORS_ORIGIN_ALLOW_ALL = True

#urls.py
urlpatterns = patterns(
    url(r&#39;^o/&#39;, include(&#39;oauth2_provider.urls&#39;, namespace=&#39;oauth2_provider&#39;)),
)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;创建app&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;http://localhost:8000/o/applications/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;token&quot;&gt;授权&amp;amp;token&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;授权&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;http://localhost:8000/o/authorize?response_type=code&amp;amp;state=whatever&amp;amp;client_id=syj&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生成access_token&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;curl -X POST -d
“code=lrKz7kEXJMtYePDLnKKAp10rQ0m9iZ
&amp;amp;client_id=syj
&amp;amp;client_secret=mnHzgZRzbvT920C25o7FnGY
&amp;amp;grant_type=authorization_code
&amp;amp;redirect_uri=http://localhost:8001/”
http://localhost:8001/o/token/&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;redirect_url要和创建app时的一样&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;code为请求授权返回的授权码&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;api&quot;&gt;制作api&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;制作api&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
from oauth2_provider.views.generic import ProtectedResourceView
class ApiEndpoint(ProtectedResourceView):
    def get(self, request, *args, **kwargs):
        return HttpResponse(&#39;Hello, OAuth2!&#39;)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;需要加?access_token=才能正确访问&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;django-user&quot;&gt;替代django user&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;配置settings&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
AUTHENTICATION_BACKENDS = (
    &#39;oauth2_provider.backends.OAuth2Backend&#39;,
    #&#39;django.contrib.auth.backends.ModelBackend&#39;      也可以不注释用来登陆admin
)

MIDDLEWARE_CLASSES = (
    &#39;...&#39;,
    &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
    &#39;oauth2_provider.middleware.OAuth2TokenMiddleware&#39;,
    &#39;...&#39;,
)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;顺序&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;（1）.当SessionAuthenticationMiddleware存在时必须在OAuth2TokenMiddleware之前&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（2）.SessionAuthenticationMiddleware不是必须的&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（3）当OAuth2TokenMiddleware在 AuthenticationMiddleware之前或 AuthenticationMiddleware不存在，则只有token验证&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（4）OAuth2TokenMiddleware在AuthenticationMiddleware之后，则先账号密码验证，通过的话就没事了，如果没通过在用token&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;login_required&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;视图保护&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
from django.contrib.auth.decorators import login_required
@login_required()
def secret_page(request, *args, **kwargs):
    return HttpResponse(&#39;Secret contents!&#39;, status=200)

urlpatterns = patterns(
    url(r&#39;^secret$&#39;, &#39;my.views.secret_page&#39;, name=&#39;secret&#39;),
)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;curl -H “Authorization: Bearer 123456” -X GET http://localhost:8000/secret&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rest&quot;&gt;rest联用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
OAUTH2_PROVIDER = {
    &#39;SCOPES&#39;: {&#39;read&#39;: &#39;Read scope&#39;, &#39;write&#39;: &#39;Write scope&#39;, &#39;groups&#39;: &#39;Access to your groups&#39;}
}
REST_FRAMEWORK = {
    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (
        &#39;oauth2_provider.ext.rest_framework.OAuth2Authentication&#39;,
    )，
    &#39;DEFAULT_PERMISSION_CLASSES&#39;: (
        &#39;rest_framework.permissions.IsAuthenticated&#39;,
    )
}
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;permission_classes&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
from oauth2_provider.ext.rest_framework import TokenHasReadWriteScope, TokenHasScope
api_view里加入
    permission_classes = [permissions.IsAuthenticated, TokenHasReadWriteScope]
    permission_classes = [permissions.IsAuthenticated, TokenHasScope]
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;以password方式建立applications&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;curl -X POST -d “grant_type=password&amp;amp;username=&lt;user_name&gt;&amp;amp;password=&lt;password&gt;&quot;
 -u&quot;&lt;client_id&gt;:&lt;client_secret&gt;&quot; http://localhost:8000/o/token/&lt;/client_secret&gt;&lt;/client_id&gt;&lt;/password&gt;&lt;/user_name&gt;&lt;/p&gt;

    &lt;p&gt;获取token&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;curl -H “Authorization: Bearer &lt;your_access_token&gt;&quot; http://localhost:8000/users/&lt;/your_access_token&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在authorize时可以添加scope属性,&amp;amp;scope=read&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 10 Dec 2015 05:01:59 +0800</pubDate>
        <link>/2015/12/10/Django-auth/</link>
        <guid isPermaLink="true">/2015/12/10/Django-auth/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>oauth基础</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;授权模式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;授权码模式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;简化模式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;密码模式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;客户端模式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#token&quot; id=&quot;markdown-toc-token&quot;&gt;更新token&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;这里记录一下oauth2.0的一些基本知识&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;授权模式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;oauth授权模式分类&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;授权码模式（authorization code）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;简化模式（implicit）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;密码模式（resource owner password credentials）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;客户端模式（client credentials）&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;授权码模式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;流程&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;（A）用户访问客户端，后者将前者导向认证服务器。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（B）用户选择是否给予客户端授权。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（D）客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A步骤中，客户端申请认证的URI，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;response_type：表示授权类型，必选项，此处的值固定为”code”&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;client_id：表示客户端的ID，必选项&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;redirect_uri：表示重定向URI，可选项&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scope：表示申请的权限范围，可选项&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C步骤中，服务器回应客户端的URI，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;grant_type：表示使用的授权模式，必选项，此处的值固定为”authorization_code”。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;code：表示上一步获得的授权码，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;client_id：表示客户端ID，必选项。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;E步骤中，认证服务器发送的HTTP回复，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;access_token：表示访问令牌，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;简化模式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;流程&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;（A）客户端将用户导向认证服务器。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（B）用户决定是否给于客户端授权。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（C）假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（F）浏览器执行上一步获得的脚本，提取出令牌。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（G）浏览器将令牌发给客户端。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A步骤中，客户端发出的HTTP请求，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;response_type：表示授权类型，此处的值固定为”token”，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;client_id：表示客户端的ID，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;redirect_uri：表示重定向的URI，可选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scope：表示权限范围，可选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C步骤中，认证服务器回应客户端的URI，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;access_token：表示访问令牌，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;token_type：表示令牌类型，该值大小写不敏感，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;密码模式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;流程&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;（A）用户向客户端提供用户名和密码。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（C）认证服务器确认无误后，向客户端提供访问令牌。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B步骤中，客户端发出的HTTP请求，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;grant_type：表示授权类型，此处的值固定为”password”，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;username：表示用户名，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;password：表示用户的密码，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scope：表示权限范围，可选项。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-5&quot;&gt;客户端模式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;流程&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;（B）认证服务器确认无误后，向客户端提供访问令牌。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A步骤中，客户端发出的HTTP请求，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;grant_type：表示授权类型，此处的值固定为”clientcredentials”，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scope：表示权限范围，可选项。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;token&quot;&gt;更新token&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;客户端发出更新令牌的HTTP请求，包含以下参数：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;granttype：表示使用的授权模式，此处的值固定为”refreshtoken”，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;refresh_token：表示早前收到的更新令牌，必选项。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 09 Dec 2015 03:17:45 +0800</pubDate>
        <link>/2015/12/09/oauth/</link>
        <guid isPermaLink="true">/2015/12/09/oauth/</guid>
        
        
        <category>杂谈</category>
        
      </item>
    
      <item>
        <title>Django rest_framework 其他技巧</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#restframework&quot; id=&quot;markdown-toc-restframework&quot;&gt;rest_framework使用&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;restframework&quot;&gt;rest_framework使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;显示api入口&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from rest_framework.decorators import api_view
    from rest_framework.reverse import reverse
    @api_view([&#39;GET&#39;])
    def api_root(request, format=None):
        return Response({&#39;users&#39;: reverse(&#39;user-list&#39;, request=request, format=format),
            &#39;snippets&#39;: reverse(&#39;snippet-list&#39;, request=request, format=format)})

    url(r&#39;^$&#39;,api_root),
    url(r&#39;^xuliehua/$&#39;,hellolist.as_view(),name=&#39;snippet-list&#39;),
    url(r&#39;^users/$&#39;, UserList.as_view(),name=&#39;user-list&#39;),
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;利用html显示实例的某个属性&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from rest_framework import renderers
    class SnippetHighlight(generics.GenericAPIView):
        queryset = Snippet.objects.all()
        renderer_classes = (renderers.StaticHTMLRenderer,)      #使用html静态页面来渲染
        def get(self, request, *args, **kwargs):
            snippet = self.get_object()
            return Response(&#39;&lt;b&gt;&#39;+snippet.title+&#39;&lt;/b&gt;&#39;)

    url(r&#39;^hello/(?P&lt;pk&gt;\d+)/highlight/$&#39;,SnippetHighlight.as_view()),
 

 *  超链接显示属性or详情
 &lt;pre&gt;&lt;code&gt;
    class SuserSerializer(serializers.ModelSerializer):
        snippet = serializers.HyperlinkedRelatedField(many= True,read_only=True,view_name=&#39;snippet-detail&#39;)
        class Meta:
            model=Suser
            fields=(&#39;name&#39;,&#39;ok&#39;,&#39;snippet&#39;)
 &lt;/code&gt;&lt;/pre&gt;

 &lt;pre&gt;&lt;code&gt;
    class SnippetSerializer(serializers.ModelSerializer):
        title=serializers.HyperlinkedIdentityField(view_name=&#39;snippet-highlight&#39;,format=&#39;html&#39;)
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;)
 &lt;/code&gt;&lt;/pre&gt;

 * 使用viewsets
 &lt;pre&gt;&lt;code&gt;
        class UserViewSet(viewsets.ReadOnlyModelViewSet):
            queryset = Suser.objects.all()
            serializer_class = SuserSerializer
        class SnippetViewSet(viewsets.ModelViewSet):
            queryset = Snippet.objects.all()
            serializer_class = SnippetSerializer
            permission_classes = (permissions.IsAuthenticatedOrReadOnly,)
            @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])
            def highlight(self, request, *args, **kwargs):
                snippet = self.get_object()
                return Response(snippet.title)

        snippet_list = SnippetViewSet.as_view({
            &#39;get&#39;: &#39;list&#39;,
            &#39;post&#39;: &#39;create&#39;
        })
        snippet_detail = SnippetViewSet.as_view({
            &#39;get&#39;: &#39;retrieve&#39;,
            &#39;put&#39;: &#39;update&#39;,
            &#39;delete&#39;: &#39;destroy&#39;
        })
        snippet_highlight = SnippetViewSet.as_view({
            &#39;get&#39;: &#39;highlight&#39;
        }, renderer_classes=[renderers.StaticHTMLRenderer])
        user_list = UserViewSet.as_view({
            &#39;get&#39;: &#39;list&#39;
        })
        user_detail = UserViewSet.as_view({
            &#39;get&#39;: &#39;retrieve&#39;
        })

        url(r&#39;^xuliehua/$&#39;,snippet_list,name=&#39;snippet-list&#39;),
        url(r&#39;^hello/(?P&lt;pk&gt;\d+)/$&#39;,snippet_detail,name=&#39;snippet-detail&#39;),
        url(r&#39;^hello/(?P&lt;pk&gt;\d+)/highlight/$&#39;,snippet_highlight,name=&#39;snippet-highlight&#39;),
        url(r&#39;^users/$&#39;, user_list,name=&#39;user-list&#39;),
        url(r&#39;^users/(?P&lt;pk&gt;[0-9]+)/$&#39;, user_detail,name=&#39;suser-detail&#39;),
 
&lt;/pk&gt;&lt;/pk&gt;&lt;/pk&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/pk&gt;&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 06 Dec 2015 05:01:59 +0800</pubDate>
        <link>/2015/12/06/Django-rest4/</link>
        <guid isPermaLink="true">/2015/12/06/Django-rest4/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Django rest_framework 外键&amp;perm</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;外键&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#permission&quot; id=&quot;markdown-toc-permission&quot;&gt;permission&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;改变存取数据的形式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;外键&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;外键使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class Suser(models.Model):
        name=models.CharField(max_length=100)
        ok=models.CharField(max_length=100)
    class Snippet(models.Model):
        created = models.DateTimeField(auto_now_add=True)
        title = models.CharField(max_length=100, blank=True, default=&#39;&#39;)
        code = models.TextField()
        suser=models.ForeignKey(&#39;Suser&#39;,related_name=&#39;snippet&#39;)   #注意related_name要和序列化中的一样
        class Meta:
            ordering = (&#39;created&#39;,)
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
    class SuserSerializer(serializers.ModelSerializer):
        snippet = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all())   #在querset中找存在外键是该user的，相当于user.snipprt_set
        class Meta:
            model=Suser
            fields=(&#39;name&#39;,&#39;ok&#39;,&#39;snippet&#39;)

    class UserList(generics.ListAPIView):
        queryset = Suser.objects.all()
        serializer_class = SuserSerializer
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;显示外键信息&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class SnippetSerializer(serializers.ModelSerializer):
        suser=serializers.ReadOnlyField(source=&#39;suser.ok&#39;)  #注意有source
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;,&#39;suser&#39;)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;格外存储&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class hellolist(generics.ListCreateAPIView):
        queryset = Snippet.objects.all()
        serializer_class = SnippetSerializer
        def perform_create(self, serializer):
            serializer.save(suser=Suser.objects.get(ok=&#39;10&#39;))
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;permission&quot;&gt;permission&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加permission：&lt;/p&gt;

    &lt;p&gt;permission_classes = (permissions.IsAuthenticated,)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自定义permission&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class BasePermission(object):
        def has_permission(self, request, view):     #注意有三个参数，是访问所有数据的前提
            return True
        def has_object_permission(self, request, view, obj):  #注意有四个参数，限制单个实例的访问即retrie update delete
            return True
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;在rest页面增加logonin：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    url(r&#39;^api-auth/&#39;, include(&#39;rest_framework.urls&#39;,
                               namespace=&#39;rest_framework&#39;))
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;改变存取数据的形式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;改变存取数据的形式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class SnippetSerializer(serializers.ModelSerializer):
        suser=serializers.ReadOnlyField(source=&#39;suser.ok&#39;)
        title=serializers.SerializerMethodField(&#39;hello&#39;,read_only=True)
        def hello(self,instance):
            return &#39;huohuohuo&#39;
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;,&#39;suser&#39;)
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 02 Dec 2015 04:51:36 +0800</pubDate>
        <link>/2015/12/02/Django-rest3/</link>
        <guid isPermaLink="true">/2015/12/02/Django-rest3/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Django rest_framework apiview</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#apiview&quot; id=&quot;markdown-toc-apiview&quot;&gt;apiview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mixin&quot; id=&quot;markdown-toc-mixin&quot;&gt;mixin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#genertic&quot; id=&quot;markdown-toc-genertic&quot;&gt;genertic&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;apiview&quot;&gt;apiview&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;apiview使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
class hellolist(APIView):
    def get(self,request):
        sni=Snippet.objects.all()
        serializer=SnippetSerializer(sni,many=True)
        return Response(serializer.data)
    def post(self,request):
        serializer=SnippetSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data,status=status.HTTP_201_CREATED)
        return Response(serializer.errors,status=status.HTTP_500_INTERNAL_SERVER_ERROR)
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
class hellodetail(APIView):
    def get_object(self, pk):
        try:
            return Snippet.objects.get(pk=pk)
        except Snippet.DoesNotExist:
            raise Http404
    def get(self,request,pk):
        snippet = self.get_object(pk)
        serializer = SnippetSerializer(snippet)
        return Response(serializer.data)
    def delete(self, request, pk):
        snippet = self.get_object(pk)
        snippet.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
    def put(self, request, pk, format=None):
        snippet = self.get_object(pk)
        serializer = SnippetSerializer(snippet, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mixin&quot;&gt;mixin&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;mixin使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
class hellolist(mixins.ListModelMixin,mixins.CreateModelMixin,generics.GenericAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
    def get(self,request, *args, **kwargs):
        return self.list(request, *args, **kwargs)   //注意为list
    def post(self,request, *args, **kwargs):
        return self.create(request, *args, **kwargs)   //注意为create 不为post！
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
class hellodetail(mixins.RetrieveModelMixin,mixins.UpdateModelMixin,mixins.DestroyModelMixin,generics.GenericAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)
    def put(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)
    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;genertic&quot;&gt;genertic&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;genertic使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
class hellolist(generics.ListCreateAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
class hellodetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 29 Nov 2015 05:09:56 +0800</pubDate>
        <link>/2015/11/29/Django-rest2/</link>
        <guid isPermaLink="true">/2015/11/29/Django-rest2/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Django rest_framework基础&amp;序列化</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;安装&amp;amp;配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;简单的示例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;序列化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#requestresponse&quot; id=&quot;markdown-toc-requestresponse&quot;&gt;request&amp;amp;response&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;安装&amp;amp;配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    pip install djangorestframework
    pip install markdown       # Markdown support for the browsable API.
    pip install django-filter  # Filtering support
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    INSTALLED_APPS = (
        ...
        &#39;rest_framework&#39;,
    )

    url(r&#39;^api-auth/&#39;, include(&#39;rest_framework.urls&#39;, namespace=&#39;rest_framework&#39;))
        #当需要使用browsable API时添加
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;简单的示例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;简单的示例&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from django.conf.urls import patterns, include, url
    from django.contrib.auth.models import User
    from rest_framework import routers, serializers, viewsets

    class UserSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = User
            fields = (&#39;url&#39;, &#39;username&#39;, &#39;email&#39;, &#39;is_staff&#39;)

    class UserViewSet(viewsets.ModelViewSet):
        queryset = User.objects.all()
        serializer_class = UserSerializer

    router = routers.DefaultRouter()
    router.register(r&#39;users&#39;, UserViewSet)

    urlpatterns = patterns(&#39;&#39;,
        url(r&#39;^admin/&#39;, include(admin.site.urls)),
        url(r&#39;^rest1/$&#39;, include(router.urls)),
    )
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;序列化&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    #model.py
    class Snippet(models.Model):
        created = models.DateTimeField(auto_now_add=True)
        title = models.CharField(max_length=100, blank=True, default=&#39;&#39;)
        code = models.TextField()
        class Meta:
            ordering = (&#39;created&#39;,)
 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    #serializers.py
    class SnippetSerializer(serializers.ModelSerializer):
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;)             #fields决定显示哪些
 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    #views.py
    from rest_framework.renderers import JSONRenderer
    def hello(request):
        snippet = Snippet(code=&#39;foo = &quot;bar&quot;\n&#39;)
        snippet.save()

        serializer = SnippetSerializer(snippet)    #转化为python的列表模式
        print serializer.data
        serializer = SnippetSerializer(Snippet.objects.all(), many=True) #many=true可以转化多个

        content = JSONRenderer().render(serializer.data)    #转化为json,注意JSONRenderer有括号
        print content

        stream = BytesIO(content)               #反序列化，先放在bytesio中
        data=JSONParser().parse(stream)
        serializer1 = SnippetSerializer(data=data)
        if serializer1.is_valid():
            val=serializer1.validated_data
            print val
            serializer1.save()     #会存在数据库中
        else:
            print &#39;aaaaaaaaaa&#39;
        return HttpResponse(serializer.data)
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;requestresponse&quot;&gt;request&amp;amp;response&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;request.POST  # Only works for ‘POST’ method.&lt;/p&gt;

    &lt;p&gt;request.data  # Works for ‘POST’, ‘PUT’ and ‘PATCH’ methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;例子&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from rest_framework import status
    from rest_framework.decorators import api_view
    from rest_framework.response import Response
    @api_view([&#39;GET&#39;, &#39;POST&#39;])
    def hellolist(request):
         if request.method == &#39;GET&#39;:
            snippets = Snippet.objects.all()
            serializer = SnippetSerializer(snippets, many=True)
            return Response(serializer.data)
         if request.method == &#39;POST&#39;:
            serializer = SnippetSerializer(data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
    @api_view([&#39;GET&#39;, &#39;PUT&#39;, &#39;DELETE&#39;])
    def hellodetail(request,pk):
        try:
            snippet = Snippet.objects.get(pk=pk)
        except Snippet.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)
        if request.method == &#39;GET&#39;:
            serializer = SnippetSerializer(snippet)
            return Response(serializer.data)
        elif request.method == &#39;DELETE&#39;:
            snippet.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        elif request.method == &#39;PUT&#39;:
            serializer = SnippetSerializer(snippet, data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 25 Nov 2015 04:23:34 +0800</pubDate>
        <link>/2015/11/25/Django-rest/</link>
        <guid isPermaLink="true">/2015/11/25/Django-rest/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Python 迭代器&amp;生成器</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;迭代器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;生成器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;在这里记录一下python迭代器与生成器的一些基本概念和用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;迭代器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器是访问集合元素的一种方式。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器只能往前不会后退,对于原生支持随机访问的数据结构（如tuple、list），迭代器和经典for循环的索引访问相比并无优势，反而丢失了索引值（可以使用内建函数enumerate()找回这个索引值）。但对于无法随机访问的数据结构（比如set）而言，迭代器是唯一的访问元素的方式。
 另外，迭代器的一大优点是不要求事先准备好整个迭代过程中所有的元素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器仅仅在迭代到某个元素时才计算该元素，而在这之前或之后，元素可以不存在或者被销毁。这个特点使得它特别适合用于遍历一些巨大的或是无限的集合，比如几个G的文件，或是斐波那契数列等等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器有两个基本的方法&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;next方法：返回迭代器的下一个元素&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;__iter__方法：返回迭代器对象本身&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;例子：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
 class Fab(object):
    def __init__(self, max):
        self.max = max
        self.n, self.a, self.b = 0, 0, 1

    def __iter__(self):
        return self

    def next(self):
        if self.n &amp;lt; self.max:
            r = self.b
            self.a, self.b = self.b, self.a + self.b
            self.n = self.n + 1
            return r
        raise StopIteration()
 print Fabs(5)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;使用next()方法可以访问下一个元素：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt;&amp;gt; it.next()
0
&amp;gt;&amp;gt;&amp;gt; it.next()
1
&amp;gt;&amp;gt;&amp;gt; it.next()
2
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;python处理迭代器越界是抛出StopIteration异常&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
lst = range(5)
it = iter(lst)
try:
    while True:
        val = it.next()
        print val
except StopIteration:
    pass
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;事实上，因为迭代器如此普遍，python专门为for关键字做了迭代器的语法糖。在for循环中，Python将自动调用工厂函数iter()获得迭代器，自动调用next()获取元素，还完成了检查StopIteration异常的工作&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;生成器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;带有 yield 的函数在 Python 中被称之为 generator（生成器）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，
 调用时不会执行函数，而是返回一个 iterable 对象！
 在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield  时， 函数就返回一个迭代值，下次迭代时，
 代码从 yield 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，
 于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;例子：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
  def read_file(fpath):
    BLOCK_SIZE = 1024
    with open(fpath, &#39;rb&#39;) as f:
        while True:
            block = f.read(BLOCK_SIZE)
            if block:
                yield block
            else:
                return
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 04:41:18 +0800</pubDate>
        <link>/2015/11/20/Python-yield/</link>
        <guid isPermaLink="true">/2015/11/20/Python-yield/</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python Urllib2模块</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#urllib2&quot; id=&quot;markdown-toc-urllib2&quot;&gt;urllib2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;urllib2是一个HTTP 客户端库。这里总结了一些 urllib2 库的使用细节&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;urllib2&quot;&gt;urllib2&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;调用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    import urllib2
    response=urllib2.urlopen(&#39;http://www.douban.com&#39;)
    html=response.read()
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;提交数据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    import urllib
    import urllib2
    url = &#39;http://shanyj.github.io&#39;
    info = {&#39;name&#39; : &#39;syj&#39;&#39;,
              &#39;location&#39; : &#39;shanghai&#39;}
    data = urllib.urlencode(info)  #info 需要被编码为urllib2能理解的格式，这里用到的是urllib
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    the_page = response.read()
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;headers&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    url = &#39;http://sssss&#39;
    user_agent = &#39;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#39;# 将user_agent写入头信息
    values = {&#39;name&#39; : &#39;syj&#39;,
              &#39;location&#39; : &#39;sh&#39;,
              &#39;language&#39; : &#39;Python&#39; }
    headers = { &#39;User-Agent&#39; : user_agent }
    data = urllib.urlencode(values)
    req = urllib2.Request(url, data, headers)
    response = urllib2.urlopen(req)
    the_page = response.read()
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    import urllib2
    response = urllib2.urlopen(&#39;http://www.google.com&#39;, timeout=10)
    response.geturl()  ＃获取访问后的url 以查看是否重定向
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;禁止重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class RedirectHandler(urllib2.HTTPRedirectHandler):
        def http_error_301(self, req, fp, code, msg, headers):
            pass
        def http_error_302(self, req, fp, code, msg, headers):
            pass
    opener = urllib2.build_opener(RedirectHandler)
    opener.open(&#39;http://www.google.cn&#39;)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    cookie = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))
    response = opener.open(&#39;http://www.google.com&#39;)
    for item in cookie:
        if item.name == &#39;some_cookie_item_name&#39;:
            print item.value
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;PUT 和 DELETE 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    request = urllib2.Request(uri, data=data)
    request.get_method = lambda: &#39;PUT&#39; # or &#39;DELETE&#39;
    response = urllib2.urlopen(request)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;http返回码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    try:
        response = urllib2.urlopen(&#39;http://restrict.web.com&#39;)
    except urllib2.HTTPError, e:
        print e.code
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 05:03:16 +0800</pubDate>
        <link>/2015/11/17/Python-urllib2/</link>
        <guid isPermaLink="true">/2015/11/17/Python-urllib2/</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Mysql 特殊函数</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;其他函数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;这里主要记录下Mysql其他函数的一些用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;其他函数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LEAST&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;LEAST（值1,值2,…值n），其中值n表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;GREATEST&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GREATEST(值1，值2，…值n)，其中n表示参数列表中有n个值。在有两个或多个参数的情况下，返回最大值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MOD(X,Y)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;求余函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TRUNCATE(X,Y)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;TRUNCATE(X,Y)返回被舍去至小数点后y位的数字x。若y的值为0，则结果不带有小数点或不带有小数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HEX(X)&amp;amp;UNHEX（X)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;二进制转化函数HEX(X)和其反函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CONCAT_WS（x,s1,s2,……）&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;CONCAT_WS(‘-‘,’1st’,’2nd’,’3rd’)使用分隔符‘-’将3个字符串连接成一个字符串，结果为“1st-2nd-3rd”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LPAD(S1,LEN,S2)&amp;amp;RPAD(S1,LEN,S2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;LPAD(S1,LEN,S2)返回字符串s1，其左边由字符串s2填补到len字符串长度。假如s1的长度大于len，则返回值被缩短至len字符rd”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TRIM(S)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;删除空格的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;TRIM(S1 FROM S)删除字符串s中两端所有的子字符串s1。
 s1为可选项，在未指定情况下，删除空格&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;STRCMP(S1,S2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;STRCMP(S1,S2)若所有的字符串均相同，则返回0；若根据当前分类次序，第一个参数小于第二个，则返回-1，其他情况返回1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LOCATE(STR1,STR）&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;匹配子串开始位置的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT LOCATE(‘ball’,’football’)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ELT(N,字符串1,字符串2,字符串3,…,)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;返回指定位置的字符串的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;若N小于1或大于参数的数目，则返回值为NULL&lt;/p&gt;

        &lt;p&gt;SELECT ELT(3,’1st’,’2nd’,’3rd’)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FIELD(S,S1,S2,…)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;返回指定字符串位置的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FIELD(S,S1,S2,…)返回字符串s在列表s1，s2，……中第一次出现的位置，在找不到s的情况下，返回值为0&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果s为NULL，则返回值为0，原因是NULL不能同任何值进行同等比较&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FIND_IN_SET(S1,S2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;返回子串位置的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FIND_IN_SET(S1,S2)返回字符串s1在字符串列表s2中出现的位置，字符串列表是一个由多个逗号&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT FIND_IN_SET(‘hi’,’hihi,hey,hi,bas’)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;UTC_DATE()&amp;amp;UTC_TIME()&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;当前日期和 当前时间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IF(expr,v1,v2))&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;IF(expr,v1,v2)如果表达式expr是TRUE（expr&amp;lt;&amp;gt;0 and expr&amp;lt;&amp;gt;NULL），则IF()的返回值为v1；否则返回值为v2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IFNULL(V1,V2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;IFNULL(V1,V2)假如v1不为NULL，则IFNULL(V1,V2)的返回值为v1；否则其返回值为v2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 Nov 2015 05:06:15 +0800</pubDate>
        <link>/2015/11/15/Mysql-func2/</link>
        <guid isPermaLink="true">/2015/11/15/Mysql-func2/</guid>
        
        
        <category>Mysql</category>
        
      </item>
    
  </channel>
</rss>
