<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ShanYJ</title>
    <description>╭(╯^╰)╮吉吉的博客</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 11 Jan 2016 09:33:02 +0800</pubDate>
    <lastBuildDate>Mon, 11 Jan 2016 09:33:02 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Django rest_framework 其他技巧</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#restframework&quot; id=&quot;markdown-toc-restframework&quot;&gt;rest_framework使用&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;restframework&quot;&gt;rest_framework使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;显示api入口&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from rest_framework.decorators import api_view
    from rest_framework.reverse import reverse
    @api_view([&#39;GET&#39;])
    def api_root(request, format=None):
        return Response({&#39;users&#39;: reverse(&#39;user-list&#39;, request=request, format=format),
            &#39;snippets&#39;: reverse(&#39;snippet-list&#39;, request=request, format=format)})

    url(r&#39;^$&#39;,api_root),
    url(r&#39;^xuliehua/$&#39;,hellolist.as_view(),name=&#39;snippet-list&#39;),
    url(r&#39;^users/$&#39;, UserList.as_view(),name=&#39;user-list&#39;),
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;利用html显示实例的某个属性&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from rest_framework import renderers
    class SnippetHighlight(generics.GenericAPIView):
        queryset = Snippet.objects.all()
        renderer_classes = (renderers.StaticHTMLRenderer,)      #使用html静态页面来渲染
        def get(self, request, *args, **kwargs):
            snippet = self.get_object()
            return Response(&#39;&lt;b&gt;&#39;+snippet.title+&#39;&lt;/b&gt;&#39;)

    url(r&#39;^hello/(?P&lt;pk&gt;\d+)/highlight/$&#39;,SnippetHighlight.as_view()),
 

 *  超链接显示属性or详情
 &lt;pre&gt;&lt;code&gt;
    class SuserSerializer(serializers.ModelSerializer):
        snippet = serializers.HyperlinkedRelatedField(many= True,read_only=True,view_name=&#39;snippet-detail&#39;)
        class Meta:
            model=Suser
            fields=(&#39;name&#39;,&#39;ok&#39;,&#39;snippet&#39;)
 &lt;/code&gt;&lt;/pre&gt;

 &lt;pre&gt;&lt;code&gt;
    class SnippetSerializer(serializers.ModelSerializer):
        title=serializers.HyperlinkedIdentityField(view_name=&#39;snippet-highlight&#39;,format=&#39;html&#39;)
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;)
 &lt;/code&gt;&lt;/pre&gt;

 * 使用viewsets
 &lt;pre&gt;&lt;code&gt;
        class UserViewSet(viewsets.ReadOnlyModelViewSet):
            queryset = Suser.objects.all()
            serializer_class = SuserSerializer
        class SnippetViewSet(viewsets.ModelViewSet):
            queryset = Snippet.objects.all()
            serializer_class = SnippetSerializer
            permission_classes = (permissions.IsAuthenticatedOrReadOnly,)
            @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])
            def highlight(self, request, *args, **kwargs):
                snippet = self.get_object()
                return Response(snippet.title)

        snippet_list = SnippetViewSet.as_view({
            &#39;get&#39;: &#39;list&#39;,
            &#39;post&#39;: &#39;create&#39;
        })
        snippet_detail = SnippetViewSet.as_view({
            &#39;get&#39;: &#39;retrieve&#39;,
            &#39;put&#39;: &#39;update&#39;,
            &#39;delete&#39;: &#39;destroy&#39;
        })
        snippet_highlight = SnippetViewSet.as_view({
            &#39;get&#39;: &#39;highlight&#39;
        }, renderer_classes=[renderers.StaticHTMLRenderer])
        user_list = UserViewSet.as_view({
            &#39;get&#39;: &#39;list&#39;
        })
        user_detail = UserViewSet.as_view({
            &#39;get&#39;: &#39;retrieve&#39;
        })

        url(r&#39;^xuliehua/$&#39;,snippet_list,name=&#39;snippet-list&#39;),
        url(r&#39;^hello/(?P&lt;pk&gt;\d+)/$&#39;,snippet_detail,name=&#39;snippet-detail&#39;),
        url(r&#39;^hello/(?P&lt;pk&gt;\d+)/highlight/$&#39;,snippet_highlight,name=&#39;snippet-highlight&#39;),
        url(r&#39;^users/$&#39;, user_list,name=&#39;user-list&#39;),
        url(r&#39;^users/(?P&lt;pk&gt;[0-9]+)/$&#39;, user_detail,name=&#39;suser-detail&#39;),
 
&lt;/pk&gt;&lt;/pk&gt;&lt;/pk&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/pk&gt;&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 06 Dec 2015 05:01:59 +0800</pubDate>
        <link>/2015/12/06/Django-rest4/</link>
        <guid isPermaLink="true">/2015/12/06/Django-rest4/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Django rest_framework 外键&amp;perm</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;外键&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#permission&quot; id=&quot;markdown-toc-permission&quot;&gt;permission&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;改变存取数据的形式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;外键&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;外键使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class Suser(models.Model):
        name=models.CharField(max_length=100)
        ok=models.CharField(max_length=100)
    class Snippet(models.Model):
        created = models.DateTimeField(auto_now_add=True)
        title = models.CharField(max_length=100, blank=True, default=&#39;&#39;)
        code = models.TextField()
        suser=models.ForeignKey(&#39;Suser&#39;,related_name=&#39;snippet&#39;)   #注意related_name要和序列化中的一样
        class Meta:
            ordering = (&#39;created&#39;,)
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
    class SuserSerializer(serializers.ModelSerializer):
        snippet = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all())   #在querset中找存在外键是该user的，相当于user.snipprt_set
        class Meta:
            model=Suser
            fields=(&#39;name&#39;,&#39;ok&#39;,&#39;snippet&#39;)

    class UserList(generics.ListAPIView):
        queryset = Suser.objects.all()
        serializer_class = SuserSerializer
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;显示外键信息&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class SnippetSerializer(serializers.ModelSerializer):
        suser=serializers.ReadOnlyField(source=&#39;suser.ok&#39;)  #注意有source
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;,&#39;suser&#39;)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;格外存储&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class hellolist(generics.ListCreateAPIView):
        queryset = Snippet.objects.all()
        serializer_class = SnippetSerializer
        def perform_create(self, serializer):
            serializer.save(suser=Suser.objects.get(ok=&#39;10&#39;))
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;permission&quot;&gt;permission&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加permission：&lt;/p&gt;

    &lt;p&gt;permission_classes = (permissions.IsAuthenticated,)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自定义permission&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class BasePermission(object):
        def has_permission(self, request, view):     #注意有三个参数，是访问所有数据的前提
            return True
        def has_object_permission(self, request, view, obj):  #注意有四个参数，限制单个实例的访问即retrie update delete
            return True
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;在rest页面增加logonin：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    url(r&#39;^api-auth/&#39;, include(&#39;rest_framework.urls&#39;,
                               namespace=&#39;rest_framework&#39;))
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;改变存取数据的形式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;改变存取数据的形式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class SnippetSerializer(serializers.ModelSerializer):
        suser=serializers.ReadOnlyField(source=&#39;suser.ok&#39;)
        title=serializers.SerializerMethodField(&#39;hello&#39;,read_only=True)
        def hello(self,instance):
            return &#39;huohuohuo&#39;
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;,&#39;suser&#39;)
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 02 Dec 2015 04:51:36 +0800</pubDate>
        <link>/2015/12/02/Django-rest3/</link>
        <guid isPermaLink="true">/2015/12/02/Django-rest3/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Django rest_framework apiview</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#apiview&quot; id=&quot;markdown-toc-apiview&quot;&gt;apiview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mixin&quot; id=&quot;markdown-toc-mixin&quot;&gt;mixin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#genertic&quot; id=&quot;markdown-toc-genertic&quot;&gt;genertic&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;apiview&quot;&gt;apiview&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;apiview使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
class hellolist(APIView):
    def get(self,request):
        sni=Snippet.objects.all()
        serializer=SnippetSerializer(sni,many=True)
        return Response(serializer.data)
    def post(self,request):
        serializer=SnippetSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data,status=status.HTTP_201_CREATED)
        return Response(serializer.errors,status=status.HTTP_500_INTERNAL_SERVER_ERROR)
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
class hellodetail(APIView):
    def get_object(self, pk):
        try:
            return Snippet.objects.get(pk=pk)
        except Snippet.DoesNotExist:
            raise Http404
    def get(self,request,pk):
        snippet = self.get_object(pk)
        serializer = SnippetSerializer(snippet)
        return Response(serializer.data)
    def delete(self, request, pk):
        snippet = self.get_object(pk)
        snippet.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
    def put(self, request, pk, format=None):
        snippet = self.get_object(pk)
        serializer = SnippetSerializer(snippet, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mixin&quot;&gt;mixin&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;mixin使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
class hellolist(mixins.ListModelMixin,mixins.CreateModelMixin,generics.GenericAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
    def get(self,request, *args, **kwargs):
        return self.list(request, *args, **kwargs)   //注意为list
    def post(self,request, *args, **kwargs):
        return self.create(request, *args, **kwargs)   //注意为create 不为post！
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
class hellodetail(mixins.RetrieveModelMixin,mixins.UpdateModelMixin,mixins.DestroyModelMixin,generics.GenericAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)
    def put(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)
    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;genertic&quot;&gt;genertic&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;genertic使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
class hellolist(generics.ListCreateAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
class hellodetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 29 Nov 2015 05:09:56 +0800</pubDate>
        <link>/2015/11/29/Django-rest2/</link>
        <guid isPermaLink="true">/2015/11/29/Django-rest2/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Django rest_framework基础&amp;序列化</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;安装&amp;amp;配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;简单的示例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;序列化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#requestresponse&quot; id=&quot;markdown-toc-requestresponse&quot;&gt;request&amp;amp;response&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;最近对产品api进行rest改造完毕，就记录下Django中rest-framework的一些基本用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;安装&amp;amp;配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    pip install djangorestframework
    pip install markdown       # Markdown support for the browsable API.
    pip install django-filter  # Filtering support
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    INSTALLED_APPS = (
        ...
        &#39;rest_framework&#39;,
    )

    url(r&#39;^api-auth/&#39;, include(&#39;rest_framework.urls&#39;, namespace=&#39;rest_framework&#39;))
        #当需要使用browsable API时添加
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;简单的示例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;简单的示例&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from django.conf.urls import patterns, include, url
    from django.contrib.auth.models import User
    from rest_framework import routers, serializers, viewsets

    class UserSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = User
            fields = (&#39;url&#39;, &#39;username&#39;, &#39;email&#39;, &#39;is_staff&#39;)

    class UserViewSet(viewsets.ModelViewSet):
        queryset = User.objects.all()
        serializer_class = UserSerializer

    router = routers.DefaultRouter()
    router.register(r&#39;users&#39;, UserViewSet)

    urlpatterns = patterns(&#39;&#39;,
        url(r&#39;^admin/&#39;, include(admin.site.urls)),
        url(r&#39;^rest1/$&#39;, include(router.urls)),
    )
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;序列化&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    #model.py
    class Snippet(models.Model):
        created = models.DateTimeField(auto_now_add=True)
        title = models.CharField(max_length=100, blank=True, default=&#39;&#39;)
        code = models.TextField()
        class Meta:
            ordering = (&#39;created&#39;,)
 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    #serializers.py
    class SnippetSerializer(serializers.ModelSerializer):
        class Meta:
            model = Snippet
            fields = (&#39;id&#39;, &#39;title&#39;, &#39;code&#39;)             #fields决定显示哪些
 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    #views.py
    from rest_framework.renderers import JSONRenderer
    def hello(request):
        snippet = Snippet(code=&#39;foo = &quot;bar&quot;\n&#39;)
        snippet.save()

        serializer = SnippetSerializer(snippet)    #转化为python的列表模式
        print serializer.data
        serializer = SnippetSerializer(Snippet.objects.all(), many=True) #many=true可以转化多个

        content = JSONRenderer().render(serializer.data)    #转化为json,注意JSONRenderer有括号
        print content

        stream = BytesIO(content)               #反序列化，先放在bytesio中
        data=JSONParser().parse(stream)
        serializer1 = SnippetSerializer(data=data)
        if serializer1.is_valid():
            val=serializer1.validated_data
            print val
            serializer1.save()     #会存在数据库中
        else:
            print &#39;aaaaaaaaaa&#39;
        return HttpResponse(serializer.data)
 &lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;requestresponse&quot;&gt;request&amp;amp;response&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;request.POST  # Only works for ‘POST’ method.&lt;/p&gt;

    &lt;p&gt;request.data  # Works for ‘POST’, ‘PUT’ and ‘PATCH’ methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;例子&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    from rest_framework import status
    from rest_framework.decorators import api_view
    from rest_framework.response import Response
    @api_view([&#39;GET&#39;, &#39;POST&#39;])
    def hellolist(request):
         if request.method == &#39;GET&#39;:
            snippets = Snippet.objects.all()
            serializer = SnippetSerializer(snippets, many=True)
            return Response(serializer.data)
         if request.method == &#39;POST&#39;:
            serializer = SnippetSerializer(data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 &lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
    @api_view([&#39;GET&#39;, &#39;PUT&#39;, &#39;DELETE&#39;])
    def hellodetail(request,pk):
        try:
            snippet = Snippet.objects.get(pk=pk)
        except Snippet.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)
        if request.method == &#39;GET&#39;:
            serializer = SnippetSerializer(snippet)
            return Response(serializer.data)
        elif request.method == &#39;DELETE&#39;:
            snippet.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        elif request.method == &#39;PUT&#39;:
            serializer = SnippetSerializer(snippet, data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 25 Nov 2015 04:23:34 +0800</pubDate>
        <link>/2015/11/25/Django-rest/</link>
        <guid isPermaLink="true">/2015/11/25/Django-rest/</guid>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Python 迭代器&amp;生成器</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;迭代器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;生成器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;在这里记录一下python迭代器与生成器的一些基本概念和用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;迭代器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器是访问集合元素的一种方式。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器只能往前不会后退,对于原生支持随机访问的数据结构（如tuple、list），迭代器和经典for循环的索引访问相比并无优势，反而丢失了索引值（可以使用内建函数enumerate()找回这个索引值）。但对于无法随机访问的数据结构（比如set）而言，迭代器是唯一的访问元素的方式。
 另外，迭代器的一大优点是不要求事先准备好整个迭代过程中所有的元素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器仅仅在迭代到某个元素时才计算该元素，而在这之前或之后，元素可以不存在或者被销毁。这个特点使得它特别适合用于遍历一些巨大的或是无限的集合，比如几个G的文件，或是斐波那契数列等等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器有两个基本的方法&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;next方法：返回迭代器的下一个元素&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;__iter__方法：返回迭代器对象本身&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;例子：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
 class Fab(object):
    def __init__(self, max):
        self.max = max
        self.n, self.a, self.b = 0, 0, 1

    def __iter__(self):
        return self

    def next(self):
        if self.n &amp;lt; self.max:
            r = self.b
            self.a, self.b = self.b, self.a + self.b
            self.n = self.n + 1
            return r
        raise StopIteration()
 print Fabs(5)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;使用next()方法可以访问下一个元素：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt;&amp;gt; it.next()
0
&amp;gt;&amp;gt;&amp;gt; it.next()
1
&amp;gt;&amp;gt;&amp;gt; it.next()
2
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;python处理迭代器越界是抛出StopIteration异常&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
lst = range(5)
it = iter(lst)
try:
    while True:
        val = it.next()
        print val
except StopIteration:
    pass
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;事实上，因为迭代器如此普遍，python专门为for关键字做了迭代器的语法糖。在for循环中，Python将自动调用工厂函数iter()获得迭代器，自动调用next()获取元素，还完成了检查StopIteration异常的工作&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;生成器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;带有 yield 的函数在 Python 中被称之为 generator（生成器）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，
 调用时不会执行函数，而是返回一个 iterable 对象！
 在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield  时， 函数就返回一个迭代值，下次迭代时，
 代码从 yield 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，
 于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;例子：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
  def read_file(fpath):
    BLOCK_SIZE = 1024
    with open(fpath, &#39;rb&#39;) as f:
        while True:
            block = f.read(BLOCK_SIZE)
            if block:
                yield block
            else:
                return
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 04:41:18 +0800</pubDate>
        <link>/2015/11/20/Python-yield/</link>
        <guid isPermaLink="true">/2015/11/20/Python-yield/</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python Urllib2模块</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#urllib2&quot; id=&quot;markdown-toc-urllib2&quot;&gt;urllib2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;urllib2是一个HTTP 客户端库。这里总结了一些 urllib2 库的使用细节&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;urllib2&quot;&gt;urllib2&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;调用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    import urllib2
    response=urllib2.urlopen(&#39;http://www.douban.com&#39;)
    html=response.read()
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;提交数据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    import urllib
    import urllib2
    url = &#39;http://shanyj.github.io&#39;
    info = {&#39;name&#39; : &#39;syj&#39;&#39;,
              &#39;location&#39; : &#39;shanghai&#39;}
    data = urllib.urlencode(info)  #info 需要被编码为urllib2能理解的格式，这里用到的是urllib
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    the_page = response.read()
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;headers&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    url = &#39;http://sssss&#39;
    user_agent = &#39;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#39;# 将user_agent写入头信息
    values = {&#39;name&#39; : &#39;syj&#39;,
              &#39;location&#39; : &#39;sh&#39;,
              &#39;language&#39; : &#39;Python&#39; }
    headers = { &#39;User-Agent&#39; : user_agent }
    data = urllib.urlencode(values)
    req = urllib2.Request(url, data, headers)
    response = urllib2.urlopen(req)
    the_page = response.read()
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    import urllib2
    response = urllib2.urlopen(&#39;http://www.google.com&#39;, timeout=10)
    response.geturl()  ＃获取访问后的url 以查看是否重定向
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;禁止重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    class RedirectHandler(urllib2.HTTPRedirectHandler):
        def http_error_301(self, req, fp, code, msg, headers):
            pass
        def http_error_302(self, req, fp, code, msg, headers):
            pass
    opener = urllib2.build_opener(RedirectHandler)
    opener.open(&#39;http://www.google.cn&#39;)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    cookie = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))
    response = opener.open(&#39;http://www.google.com&#39;)
    for item in cookie:
        if item.name == &#39;some_cookie_item_name&#39;:
            print item.value
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;PUT 和 DELETE 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    request = urllib2.Request(uri, data=data)
    request.get_method = lambda: &#39;PUT&#39; # or &#39;DELETE&#39;
    response = urllib2.urlopen(request)
 &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;http返回码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
    try:
        response = urllib2.urlopen(&#39;http://restrict.web.com&#39;)
    except urllib2.HTTPError, e:
        print e.code
 &lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 05:03:16 +0800</pubDate>
        <link>/2015/11/17/Python-urllib2/</link>
        <guid isPermaLink="true">/2015/11/17/Python-urllib2/</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Mysql 特殊函数</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;其他函数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;这里主要记录下Mysql其他函数的一些用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;其他函数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LEAST&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;LEAST（值1,值2,…值n），其中值n表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;GREATEST&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GREATEST(值1，值2，…值n)，其中n表示参数列表中有n个值。在有两个或多个参数的情况下，返回最大值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MOD(X,Y)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;求余函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TRUNCATE(X,Y)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;TRUNCATE(X,Y)返回被舍去至小数点后y位的数字x。若y的值为0，则结果不带有小数点或不带有小数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HEX(X)&amp;amp;UNHEX（X)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;二进制转化函数HEX(X)和其反函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CONCAT_WS（x,s1,s2,……）&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;CONCAT_WS(‘-‘,’1st’,’2nd’,’3rd’)使用分隔符‘-’将3个字符串连接成一个字符串，结果为“1st-2nd-3rd”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LPAD(S1,LEN,S2)&amp;amp;RPAD(S1,LEN,S2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;LPAD(S1,LEN,S2)返回字符串s1，其左边由字符串s2填补到len字符串长度。假如s1的长度大于len，则返回值被缩短至len字符rd”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TRIM(S)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;删除空格的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;TRIM(S1 FROM S)删除字符串s中两端所有的子字符串s1。
 s1为可选项，在未指定情况下，删除空格&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;STRCMP(S1,S2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;STRCMP(S1,S2)若所有的字符串均相同，则返回0；若根据当前分类次序，第一个参数小于第二个，则返回-1，其他情况返回1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LOCATE(STR1,STR）&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;匹配子串开始位置的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT LOCATE(‘ball’,’football’)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ELT(N,字符串1,字符串2,字符串3,…,)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;返回指定位置的字符串的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;若N小于1或大于参数的数目，则返回值为NULL&lt;/p&gt;

        &lt;p&gt;SELECT ELT(3,’1st’,’2nd’,’3rd’)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FIELD(S,S1,S2,…)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;返回指定字符串位置的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FIELD(S,S1,S2,…)返回字符串s在列表s1，s2，……中第一次出现的位置，在找不到s的情况下，返回值为0&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果s为NULL，则返回值为0，原因是NULL不能同任何值进行同等比较&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FIND_IN_SET(S1,S2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;返回子串位置的函数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FIND_IN_SET(S1,S2)返回字符串s1在字符串列表s2中出现的位置，字符串列表是一个由多个逗号&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT FIND_IN_SET(‘hi’,’hihi,hey,hi,bas’)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;UTC_DATE()&amp;amp;UTC_TIME()&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;当前日期和 当前时间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IF(expr,v1,v2))&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;IF(expr,v1,v2)如果表达式expr是TRUE（expr&amp;lt;&amp;gt;0 and expr&amp;lt;&amp;gt;NULL），则IF()的返回值为v1；否则返回值为v2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IFNULL(V1,V2)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;IFNULL(V1,V2)假如v1不为NULL，则IFNULL(V1,V2)的返回值为v1；否则其返回值为v2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 Nov 2015 05:06:15 +0800</pubDate>
        <link>/2015/11/15/Mysql-func2/</link>
        <guid isPermaLink="true">/2015/11/15/Mysql-func2/</guid>
        
        
        <category>Mysql</category>
        
      </item>
    
      <item>
        <title>Mysql 函数</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;聚合函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scalar-&quot; id=&quot;markdown-toc-scalar-&quot;&gt;Scalar 函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;日期相关&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;这里主要记录下Mysql函数的一些用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;聚合函数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;聚合函数都是在先筛选完了再在结果上再次筛选,在GROUP BY之后,在where条件之后&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AVG()&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT Customer FROM Orders
   WHERE OrderPrice&amp;gt;(SELECT AVG(OrderPrice) FROM Orders)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;COUNT()&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT COUNT(column_name) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：&lt;/p&gt;

        &lt;p&gt;SELECT COUNT(DISTINCT column_name) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;COUNT(*) 函数返回表中的记录数：&lt;/p&gt;

        &lt;p&gt;SELECT COUNT(*) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FIRST()&amp;amp;LAST()&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT FIRST(column_name) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT LAST(column_name) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MAX()&amp;amp;MIN()&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT MAX(column_name) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT MIN(column_name) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SUM()&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SUM 函数返回数值列的总数（总额）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT SUM(column_name) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT Customer,SUM(OrderPrice) FROM Orders
   GROUP BY Customer&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;GROUP BY相当于多个where语句的结果合并起来&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;我们也可以对一个以上的列应用 GROUP BY 语句，就像这样：&lt;/p&gt;

        &lt;p&gt;SELECT Customer,OrderDate,SUM(OrderPrice) FROM Orders
   GROUP BY Customer,OrderDate&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HAVING&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;having在聚合函数之后，where在聚合函数之前&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;WHERE 关键字无法与合计函数一起使用&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT Customer,SUM(OrderPrice) FROM Orders
   WHERE Customer IN (‘a’,’b’)
   GROUP BY Customer
   HAVING SUM(OrderPrice)&amp;lt;2000&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;scalar-&quot;&gt;Scalar 函数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Scalar 函数的操作面向某个单一的值，并返回基于输入值的一个单一的值，可以和where连用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UCASE()&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT UCASE(column_name) FROM table_name&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LCASE()&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT LCASE(column_name) FROM table_name&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MID()&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT MID(column_name,start[,length]) FROM table_name&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LEN()&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT LEN(column_name) FROM table_name&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ROUND()&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT ROUND(column_name,decimals) FROM table_name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;column_name:必需。要舍入的字段。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;decimals:必需。规定要返回的小数位数。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;日期相关&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;NOW()    返回当前的日期和时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CURDATE()	返回当前的日期&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CURTIME()	返回当前的时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DATE()	提取日期或日期/时间表达式的日期部分&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT ProductName, DATE(OrderDate) AS OrderDate FROM Orders&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EXTRACT()	返回日期/时间按的单独部分，比如年、月、日、小时、分钟等等&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;EXTRACT(unit FROM date) unit可以是year、date等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DATE_ADD()	给日期添加指定的时间间隔&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;DATE_ADD(date,INTERVAL expr type)date 参数是合法的日期表达式。expr 参数是您希望添加的时间间隔。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT OrderId,DATE_ADD(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DATE_SUB()	从日期减去指定的时间间隔&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DATEDIFF()	返回两个日期之间的天数&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT DATEDIFF(‘2008-12-30’,’2008-12-29’) AS DiffDate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DATE_FORMAT()	用不同的格式显示日期/时间&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DATE_FORMAT(date,format) date 参数是合法的日期。format 规定日期/时间的输出格式。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 12 Nov 2015 04:51:25 +0800</pubDate>
        <link>/2015/11/12/MySQL-func/</link>
        <guid isPermaLink="true">/2015/11/12/MySQL-func/</guid>
        
        
        <category>Mysql</category>
        
      </item>
    
      <item>
        <title>Mysql 库&amp;表&amp;属性命令</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;库&amp;amp;表&amp;amp;属性命令&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;这里主要记录下Mysql中的Mysql库&amp;amp;表&amp;amp;属性命令的一些用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;库&amp;amp;表&amp;amp;属性命令&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SELECT INTO&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT column_name(s) INTO new_table_name [IN externaldatabase] FROM old_tablename&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;IN 子句可用于向另一个数据库中拷贝表&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT * INTO Persons IN ‘Backup.mdb’ FROM Persons&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CREATE DATABASE&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;CREATE DATABASE 用于创建数据库&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;CREATE DATABASE database_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CREATE TABLE&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;CREATE DATABASE 用于创建数据库
        &lt;pre&gt;&lt;code&gt;
 CREATE TABLE 表名称
 (
 列名称1 数据类型,
 列名称2 数据类型,
 列名称3 数据类型,
 ....
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;NOT NULL&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;NOT NULL 约束强制列不接受 NULL 值
        &lt;pre&gt;&lt;code&gt;
 CREATE TABLE Persons
 (
 Id_P int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Address varchar(255),
 City varchar(255)
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;UNIQUE&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;UNIQUE 约束唯一标识数据库表中的每条记录
        &lt;pre&gt;&lt;code&gt;
 CREATE TABLE Persons
 (
 Id_P int NOT NULL,
 City varchar(255),
 UNIQUE (Id_P)
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;如果需要命名 UNIQUE 约束，以及为多个列定义 UNIQUE 约束
        &lt;pre&gt;&lt;code&gt;
 CREATE TABLE Persons
 (
 Id_P int NOT NULL,
 City varchar(255),
 CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;当表已被创建时，如需在 “Id_P” 列创建 UNIQUE 约束，请使用下列 SQL：&lt;/p&gt;

        &lt;p&gt;ALTER TABLE Persons ADD UNIQUE (Id_P)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：&lt;/p&gt;

        &lt;p&gt;ALTER TABLE Persons ADD CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如需撤销 UNIQUE 约束，请使用下面的 SQL:&lt;/p&gt;

        &lt;p&gt;ALTER TABLE Persons DROP INDEX uc_PersonID&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PRIMARY KEY&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;PRIMARY KEY 约束唯一标识数据库表中的每条记录
        &lt;pre&gt;&lt;code&gt;
 CREATE TABLE Persons
 (
 Id_P int NOT NULL,
 City varchar(255),
 PRIMARY KEY (Id_P)
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FOREIGN KEY&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY
        &lt;pre&gt;&lt;code&gt;
 CREATE TABLE Orders
 (
 Id_O int NOT NULL,
 Id_P int,
 PRIMARY KEY (Id_O),
 FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CHECK&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;CHECK 约束用于限制列中的值的范围
        &lt;pre&gt;&lt;code&gt;
CREATE TABLE Persons
 (
 Id_P int NOT NULL,
 City varchar(255),
 CHECK (Id_P&amp;gt;0)
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DEFAULT&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;创建 DEFAULT 约束
        &lt;pre&gt;&lt;code&gt;
CREATE TABLE Persons
 (
 Id_P int NOT NULL,
 City varchar(255) DEFAULT &#39;Sandnes&#39;
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果在表已存在的情况下为 “City” 列创建 DEFAULT 约束，请使用下面的 SQL&lt;/p&gt;

        &lt;p&gt;ALTER TABLE Persons
 ALTER City SET DEFAULT ‘SANDNES’&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如需撤销 DEFAULT 约束，请使用下面的 SQL&lt;/p&gt;

        &lt;p&gt;ALTER TABLE Persons
 ALTER City DROP DEFAULT&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CREATE INDEX&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;在表上创建一个简单的索引&lt;/p&gt;

        &lt;p&gt;CREATE INDEX index_name
 ON table_name (column_name)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;在表上创建一个唯一的索引。唯一的索引意味着两个行不能拥有相同的索引值。&lt;/p&gt;

        &lt;p&gt;CREATE UNIQUE INDEX index_name
 ON table_name (column_name)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;假如您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：&lt;/p&gt;

        &lt;p&gt;CREATE INDEX PersonIndex
 ON Person (LastName, FirstName)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;删除&lt;/p&gt;

        &lt;p&gt;ALTER TABLE table_name DROP INDEX index_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DROP&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;DROP TABLE 语句用于删除表（表的结构、属性以及索引也会被删除）：&lt;/p&gt;

        &lt;p&gt;DROP TABLE 表名称&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;DROP DATABASE 语句用于删除数据库:&lt;/p&gt;

        &lt;p&gt;DROP DATABASE 数据库名称&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SQL TRUNCATE TABLE 语句&lt;/p&gt;

        &lt;p&gt;如果我们仅仅需要除去表内的数据&lt;/p&gt;

        &lt;p&gt;TRUNCATE TABLE 表名称&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ALTER&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;如需在表中添加列，请使用下列语法&lt;/p&gt;

        &lt;p&gt;ALTER TABLE table_name
 ADD column_name datatype&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;要删除表中的列，请使用下列语法&lt;/p&gt;

        &lt;p&gt;ALTER TABLE table_name
 DROP COLUMN column_name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;要改变表中列的数据类型，请使用下列语法&lt;/p&gt;

        &lt;p&gt;ALTER TABLE table_name
 ALTER COLUMN column_name datatype&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AUTO INCREMENT&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;通常希望在每次插入新记录时，自动地创建主键字段的值
        &lt;pre&gt;&lt;code&gt;
CREATE TABLE Persons
 (
 P_Id int NOT NULL AUTO_INCREMENT,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Address varchar(255),
 City varchar(255),
 PRIMARY KEY (P_Id)
 )
 &lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;要让 AUTO_INCREMENT 序列以其他的值起始，请使用下列 SQL 语法：&lt;/p&gt;

        &lt;p&gt;ALTER TABLE Persons AUTO_INCREMENT=100&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;VIEW&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;视图是基于 SQL 语句的结果集的可视化的表&lt;/p&gt;

        &lt;p&gt;CREATE VIEW view_name AS
 SELECT column_name(s)
 FROM table_name
 WHERE condition&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;使用下面的语法来更新视图&lt;/p&gt;

        &lt;p&gt;CREATE OR REPLACE VIEW view_name AS
 SELECT column_name(s)
 FROM table_name
 WHERE condition&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;删除&lt;/p&gt;

        &lt;p&gt;DROP VIEW view_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 Nov 2015 03:52:26 +0800</pubDate>
        <link>/2015/11/07/Mysql-orders/</link>
        <guid isPermaLink="true">/2015/11/07/Mysql-orders/</guid>
        
        
        <category>Mysql</category>
        
      </item>
    
      <item>
        <title>Mysql Join</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#join&quot; id=&quot;markdown-toc-join&quot;&gt;join语句&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;这里主要记录下Mysql中的Join语句的一些用法&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;join&quot;&gt;join语句&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JOIN&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;我们需要从两个或更多的表中获取结果。我们就需要执行 join&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo
 FROM Persons
 JOIN Orders
 ON Persons.Id_P = Orders.Id_P
 ORDER BY Persons.LastName&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;INNER JOIN&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;INNER JOIN 与 JOIN 是相同的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LEFT JOIN&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;LEFT JOIN 关键字会从左表 (table_name1) 那里返回所有的行，即使在右表 (table_name2) 中没有匹配的行&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT column_name(s)
 FROM table_name1
 LEFT JOIN table_name2
 ON table_name1.column_name=table_name2.column_name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;只要左边表有column_name就取出，如右边表有一样的column_name则合并，没有则留空&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RIGHT JOIN&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;RIGHT JOIN 关键字会从右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有匹配的行&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT column_name(s)
 FROM table_name1
 RIGHT JOIN table_name2
 ON table_name1.column_name=table_name2.column_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FULL JOIN&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;FULL JOIN关键字会从左右表那里返回所有的行&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT column_name(s)
 FROM table_name1
 FULL JOIN table_name2
 ON table_name1.column_name=table_name2.column_name&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;UNION&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT column_name(s) FROM table_name1
 UNION
 SELECT column_name(s) FROM table_name2&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;使增加了结果的行数，并没有增加列数，所以列数必须相同&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 03 Nov 2015 04:13:46 +0800</pubDate>
        <link>/2015/11/03/Mysql-join/</link>
        <guid isPermaLink="true">/2015/11/03/Mysql-join/</guid>
        
        
        <category>Mysql</category>
        
      </item>
    
  </channel>
</rss>
